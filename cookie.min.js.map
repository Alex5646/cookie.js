{"version":3,"sources":["cookie.js"],"names":["Cookie","set","key","value","options","name","this","expires","days","t","Date","setMilliseconds","getMilliseconds","encodeURIComponent","JSON","stringify","document","cookie","toUTCString","path","domain","secure","get","keys","_i","arguments","length","result","_a","keys_1","matches","match","RegExp","replace","push","parse","decodeURIComponent","undefined","remove","keys_2","all","split","clear","apply"],"mappings":"AAsBA,GAAIA,QAAU,WACV,QAASA,MAsJT,MAxHAA,GAAOC,IAAM,SAAUC,EAAKC,EAAOC,GAE/B,GADgB,SAAZA,IAAsBA,MACP,gBAARF,GAAkB,CACzB,IAAK,GAAIG,KAAQH,GACbI,KAAKL,IAAII,EAAMH,EAAIG,GAEvB,OAAOL,GAEX,GAAIO,GAAUH,EAAQG,OACtB,IAAuB,gBAAZA,GAAsB,CAC7B,GAAIC,GAAOJ,EAAQG,QAASE,EAAIL,EAAQG,QAAU,GAAIG,KACtDD,GAAEE,gBAAgBF,EAAEG,kBAA2B,MAAPJ,GAS5C,MAPAL,GAAQU,mBAAmBC,KAAKC,UAAUZ,IAC1Ca,SAASC,OACLf,EAAM,IAAMC,GACPC,EAAQG,QAAU,aAAeH,EAAQG,QAAQW,cAAgB,KACjEd,EAAQe,KAAO,UAAYf,EAAQe,KAAO,KAC1Cf,EAAQgB,OAAS,YAAchB,EAAQgB,OAAS,KAChDhB,EAAQiB,OAAS,WAAa,IAChCf,MAgBXN,EAAOsB,IAAM,WAET,IAAK,GADDC,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAG7B,KAAK,GADDG,MACKC,EAAK,EAAGC,EAASN,EAAMK,EAAKC,EAAOH,OAAQE,IAAM,CACtD,GAAI1B,GAAM2B,EAAOD,GACbE,EAAUd,SAASC,OAAOc,MAAM,GAAIC,QAAO,WAAa9B,EAAI+B,QAAQ,+BAAgC,QAAU,YAClHN,GAAOO,KAAKJ,EAAUhB,KAAKqB,MAAMC,mBAAmBN,EAAQ,KAAOO,QAEvE,MAAwB,IAAjBV,EAAOD,OAAcC,EAAO,GAAKA,GAkB5C3B,EAAOsC,OAAS,WAEZ,IAAK,GADDf,MACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAKC,EAAK,GAAKC,UAAUD,EAE7B,KAAK,GAAII,GAAK,EAAGW,EAAShB,EAAMK,EAAKW,EAAOb,OAAQE,IAAM,CACtD,GAAI1B,GAAMqC,EAAOX,EACjBtB,MAAKL,IAAIC,EAAK,IAAMK,QAAS,KAEjC,MAAOP,IAEXA,EAAOuB,KAAO,aAadvB,EAAOwC,IAAM,WAET,IAAK,GADDb,MACKH,EAAK,EAAGI,EAAKZ,SAASC,OAAOwB,MAAM,MAAOjB,EAAKI,EAAGF,OAAQF,IAAM,CACrE,GAAIP,GAASW,EAAGJ,GACZM,EAAUb,EAAOwB,MAAM,IAC3Bd,GAAOG,EAAQ,IAAMhB,KAAKqB,MAAMC,mBAAmBN,EAAQ,KAE/D,MAAOH,IAgBX3B,EAAO0C,MAAQ,WAEX,IAAK,GADDnB,MACKC,EAAK,EAAGI,EAAKZ,SAASC,OAAOwB,MAAM,MAAOjB,EAAKI,EAAGF,OAAQF,IAAM,CACrE,GAAIP,GAASW,EAAGJ,EAChBD,GAAKW,KAAKjB,EAAOwB,MAAM,KAAK,IAEhC,MAAOnC,MAAKgC,OAAOK,MAAMrC,KAAMiB,IAE5BvB","file":"cookie.min.js","sourcesContent":["/**\n * Класс для работы с cookies\n *\n * @class Cookie\n * @example\n * Cookie\n *   .set({\n *     string: 'Hello Wold!',\n *     array: [1, 2, 3]\n *   })\n *   .set('object', {one: 1, two: 2});\n *\n * console.log(Cookie.get('string'));\n * // -> 'Hello Wold!'\n *\n * console.log(Cookie.get('string'));\n * // -> undefined\n * console.log(Cookie.get('array'));\n * // -> [1, 2, 3]\n * console.log(Cookie.get('object'));\n * // -> {one: 1, two: 2}\n */\nvar Cookie = (function () {\n    function Cookie() {\n    }\n    /**\n     * Установка cookie\n     *\n     * @method Cookie#set\n     * @param {String|Object} key Ключ, можно передать объект в качесте этого параметра.\n     * @param {*} [value] Значение\n     * @param {Object} [options] Настройки\n     * @param {Number} [options.expires] Время истечения cookie\n     * @param {String} [options.path] Путь для cookie\n     * @param {String} [options.domain] Домен для cookie\n     * @param {Boolean} [options.secure] Если true, то пересылать cookie только по защищенному соединению\n     * @returns {Cookie}\n     *\n     * @example\n     * Cookie.set('my_cookie', 5);\n     * console.log(document.cookie)\n     * // -> 'my_cookie=5'\n     *\n     * // -- OR --\n     *\n     * Cookie.set({\n     *   one: 1,\n     *   two: 2\n     * });\n     *\n     * console.log(document.cookie);\n     * // -> 'one=1; two=2'\n     */\n    Cookie.set = function (key, value, options) {\n        if (options === void 0) { options = {}; }\n        if (typeof key === 'object') {\n            for (var name in key) {\n                this.set(name, key[name]);\n            }\n            return Cookie;\n        }\n        var expires = options.expires;\n        if (typeof expires === 'number') {\n            var days = options.expires, t = options.expires = new Date();\n            t.setMilliseconds(t.getMilliseconds() + days * 864e+5);\n        }\n        value = encodeURIComponent(JSON.stringify(value));\n        document.cookie =\n            key + '=' + value +\n                (options.expires ? '; expires=' + options.expires.toUTCString() : '') +\n                (options.path ? '; path=' + options.path : '') +\n                (options.domain ? '; domain=' + options.domain : '') +\n                (options.secure ? '; secure' : '');\n        return this;\n    };\n    /**\n     * Получение cookie\n     *\n     * @method Cookie#get\n     * @param {String} keys... Ключ\n     * @example\n     * Cookie.set('my_cookie', 5);\n     * console.log(Cookie.get('my_cookie'));\n     * // -> 5\n     *\n     * Cookie.set('my_cookie', [1, 2, 3]);\n     * console.log(Cookie.get('my_cookie'));\n     * // -> [1, 2, 3]\n     */\n    Cookie.get = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i - 0] = arguments[_i];\n        }\n        var result = [];\n        for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {\n            var key = keys_1[_a];\n            var matches = document.cookie.match(new RegExp('(?:^|; )' + key.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)'));\n            result.push(matches ? JSON.parse(decodeURIComponent(matches[1])) : undefined);\n        }\n        return result.length == 1 ? result[0] : result;\n    };\n    /**\n     * Удаление cookie\n     *\n     * @method Cookie#remove\n     * @param {String} keys... Ключ\n     * @returns {Cookie}\n     *\n     * @example\n     * Cookie.set('my_cookie', 5);\n     * console.log(document.cookie)\n     * // -> 'my_cookie=5'\n     *\n     * Cookie.remove('my_cookie')\n     * console.log(document.cookie)\n     * // -> ''\n     */\n    Cookie.remove = function () {\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i - 0] = arguments[_i];\n        }\n        for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {\n            var key = keys_2[_a];\n            this.set(key, '', { expires: -1 });\n        }\n        return Cookie;\n    };\n    Cookie.keys = function () {\n        /(^|;\\s)(.+)=/;\n    };\n    /**\n     * Получение всех cookie\n     *\n     * @method Cookie#all\n     * @returns {Object}\n     * @example\n     * Cookie.set({one: 1, two: 2});\n     * console.log(Cookie.all());\n     * // -> {one: 1, two: 2}\n     */\n    Cookie.all = function () {\n        var result = {};\n        for (var _i = 0, _a = document.cookie.split('; '); _i < _a.length; _i++) {\n            var cookie = _a[_i];\n            var matches = cookie.split('=');\n            result[matches[0]] = JSON.parse(decodeURIComponent(matches[1]));\n        }\n        return result;\n    };\n    /**\n     * Удаление всех cookie\n     *\n     * @method Cookie#clear\n     * @returns {Cookie}\n     * @example\n     * Cookie\n     *   .set({one: 1, two: 2})\n     *   .clear();\n     *\n     * console.log(document.cookie);\n     *\n     * // -> ''\n     */\n    Cookie.clear = function () {\n        var keys = [];\n        for (var _i = 0, _a = document.cookie.split('; '); _i < _a.length; _i++) {\n            var cookie = _a[_i];\n            keys.push(cookie.split('=')[0]);\n        }\n        return this.remove.apply(this, keys);\n    };\n    return Cookie;\n}());\n\n//# sourceMappingURL=cookie.js.map\n"],"sourceRoot":"/source/"}